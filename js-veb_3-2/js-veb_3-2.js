// "rest" оператор предназначен для того, чтобы собрать все данные в одну переменную.

// Пример функции, которая возвращает массив входящих в нее значений исходных параметров.

// Запись кода функции с использованием перечисления через запятую входных параметров
// function getUserInfo(name, age, email) {
//     return [name, age, email];
// }


// Запись кода той-же функции с использованием "rest" оператора
function getUserInfo(...user) {
    return [...user];
}


// Создаем переменную "info" и задаем ей параметр - функцию с набором аргументов
const info = getUserInfo('Ivan', 22, 'hellow@gmail.com');
// Выводим в лог значение переменной "info"
console.log("info =>", info);



// "spread" оператор предназначен для того, чтобы "разбить" сгруперованный набор данных (в массив или объект) на большое количество отдельных переменных.

// Пример группы из 2-х отдельных объектов с наборами типовых данных, которые необходимо объединить в один сгрипированный набор данных, например - объединить в один объект.

const infoA = {
    name: 'Ivan',
    age: 22,
};

const infoB = {
    email: '@gmail',
    password: '1111',
};

// "Стандартный" способ объединения данных из разных объектов в один, основан на создании одноименных свойств в этом новом объекте и присваивании им значений нужных параметров путем прописывания ссылок к соответствующим свойствам существующих объектов.
const user1 = {
    name: infoA.name, // ссылка на сво-во объекта "infoA"
    age: infoA.age, // ссылка на сво-во объекта "infoA"
    email: infoB.email, // ссылка на сво-во объекта "infoB"
    password: infoB.password, // ссылка на сво-во объекта "infoB"
};
// Выводим в лог содержимое объекта "user1"
console.log("user1 =>", user1);


// Выполняем аналогичную с предыдуще описаной, операцию объединения данных из двух объектов в один, с помощью оператора "spread".
const user2 = {
    ...infoA,
    ...infoB,
}
// Выводим в лог содержимое объекта "user2"
console.log("user2 =>", user2);

// Точно так же как и с объектами, с помощью оператора "spread" можно выполнять манипуляции с массивами. Например, объединить два массива в один.

// Исхадные массивы "nums1" и "nums2":
const nums1 = [1, 2, 3, 4];
console.log("nums1 =>", nums1)
const nums2 = [5, 6, 7, 8];
console.log("nums2 =>", nums2)

// Объединяем с помощью оператора "spread" в один массив "arr"
const arr = [...nums1, ...nums2];
console.log("arr =>", arr);



// Еще одним важным аспектом использования оператора "spread" является то, что его применяют для создания независимой копии сложных объектов и массивов. Этот прием позволяет максимально просто создать новый, и полностью соответствующий исходно копируемуму элементу объект или массив, который записывается в отдельную ячейку памяти.

// Исходные объект и массив
const object1 = { a: 'AAA', b: 'BBB', };
const array1 = [1, 2, 3, 4, 5];

// Копируем исходные объект и массив с помощью оператора "spread" в новые, отдельные и не связанные с исходными объектом и массивом переменные.
const object2 = { ...object1 };
const array2 = [...array1];

// Проверяем на "равенство"
console.log("object1 === object2 ->", object1 === object2);
console.log("array1 === array2 ->", array1 === array2);



// Особенностью использования оператора "spread" для создания объединенных наборов данных (объединенных в массив или объект), является то, что при использовании подобного подхода - НЕОБХОДИМО следить и учитывать последовательность записываемых в объектах данных, и ПОМНИТЬ - что приорететно-перезаписываемым являются данные, которые находятся ниже по коду.

// Например, у нас есть "дефолтный" объект с минимально необходимым набором данных про пользователя, который всегда подставляется в форму при регистрации нового пользователя некоего сервиса - "defaultUserValues".

const defaultUserValues = {
    name: '', // Пустая строка
    age: 0, // Минимальное числовое значение
    email: '', // Пустая строка
};
// Выводим в лог объект "defaultUserValues"
console.log("defaultUserValues =>", defaultUserValues);

// При регистрации, пользователь ввел данные только по одному из минимально необходимого набора - "userValues"
const userValues = {
    age: 22,
};
// Выводим в лог объект "userValues"
console.log("userValues =>", userValues);

// А нам для корректной работы скрипта нужны все три минимально-необходибымых параметра, хотя бы с дефолтными значениями внутри. Поэтому, вначали мы производим операцию "распыления" дефолтного объекта "defaultUserValues", а после - "userValues". В результате чего, те данные, которые пользователь все же соизволил ввести запишутся в нужные (одноименные) свойства, а те, что он не ввел - возьмутся из дефолтного набора - "defaultUserValues".
const user = {
    ...defaultUserValues,
    ...userValues,
}
// Выводим в лог объект "user"
console.log("user =>", user);
